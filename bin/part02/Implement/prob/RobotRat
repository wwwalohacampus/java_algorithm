[로봇 쥐]
- 힙, 정적 메모리 모두 합쳐서 256MB이내, 스택 메모리 1MB 이내
- 제한시간 C/C++ : 1.5초 이내, JAVA : 2.5초 이내


성호가 졸업 작품으로 만든 로봇 쥐가 있다. 이 로봇 쥐는 특수한 N X M 격자 내에서 이동하도록 설계되어 있다.
격자의 각 칸을 벽과 벽이 아닌 칸으로 구분되고 격자 외곽은 모두 벽으로 이루어져 있다. 
또한 로봇 쥐는 벽이 아닌 칸만 이동할 수 있고, 특히 아래와 같은 규칙으로 이동하도록 설계되어 있다.

(규칙)
1. 로봇 쥐가 현재 바라보고 있는 방향의 다음 칸이 벽이 아닌 이동할 수 있는 공간이라면 이동한다.
	단, 다음 칸이 이미 로봇 쥐가 머물던 공간(최초 위치 포함)이거나 벽이라면 이동하지 않고
	시계방향으로 90도 회전하여 다시 탐색한다.
2. 만약 현재 위치에서 4방향 모두 이동할 수 있는 공간이 없다면 현재 칸에 최초 진입했을 때
	바라본 방향을 기준으로 한 칸 뒤로 이동한 후, 1번을 다시 수행한다.
3. 2번에서 만약 뒷공간이 벽인 경우 작동을 멈춘다.

이때, 로봇 쥐가 후진을 포함하여 이동한 총횟수를 구하는 프로그램을 작성하시오.

[입력]
첫 번째 줄에서 테스트케이스의 수  T(1 ≤ T ≤ 50)가 주어진다.
각 테스트케이스마다 첫 번째 줄에 격자의 세로의 크기 N과 가로의 크기 M이 공백을 두고 주어진다.(3 ≤ N,M ≤ 50)
두 번째 줄에 최초 로봇 쥐가 있는 좌표(R,C)와 최초 바라보고 있는 방향 D가 각각 공백을 두고 주어진다.
R과 C는 행과 열을 의미하고, D가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있음을 의미한다.
세 번째 줄부터 N개의 줄에 걸쳐 격자의 상태가 공백을 두고 주어진다. 좌측 위의 위치는 1행 1열 즉,(1,1)이며,
각 칸의 값이 0일 경우 빈 칸, 1인 경우 벽을 의미한다. 또한, 격자의 외곽은 벽으로 둘러 쌓여 있고, 최초 로봇 쥐의 위치는 빈칸임이 보장된다.


[출력]
각 줄마다 "#T"(T는 테스트케이스 번호)를 출력한 뒤, 로봇 쥐가 멈출 때까지 총 이동한 횟수를 출력하시오.

[sample input]
3
4 4
2 2 2
1 1 1 1
1 0 0 1
1 0 0 1
1 1 1 1
3 4
2 3 0
1 1 1 1
1 0 0 1
1 1 1 1
8 7
4 5 0
1 1 1 1 1 1 1
1 0 0 0 0 0 1
1 0 0 0 0 1 1
1 1 0 1 0 1 1
1 0 0 0 0 0 1
1 0 1 1 0 0 1
1 0 0 0 0 0 1
1 1 1 1 1 1 1


[sample output]
#1 4
#2 2
#3 30

